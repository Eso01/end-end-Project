apiVersion: v1
kind: pod
metadata:
name: nginx-pod
spec:
containers:
- name: nginx
  image: nginx
  volumeMounts:
   - name: config-volume
     mountPath: /app/config
volumes:
 - name: config-volume
   configMap:
    name: nginx-config # issues with identation

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend # the selector must be consistent with the labels of the template
    spec:
      containers:
        - name: frontend
          image: nginx

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: backend-db
spec:
  selector:
    matchLabels:
      app: backend
  serviceName: backend-service # The selector must match the labels of the template
  replicas: 3
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: mysql
          image: mysql
          ports:
            - containerPort: 3306
          # not sure what to add but I suspect we need to add a volumeMount and a volume where Database will be stored
          #volumeMounts:
           # - name: mysql-storage (could be mongodb or anything else)
            #  mountPath: /var/lib/mysql
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-api
  template:
    metadata:
      labels:
        app: user-api
    spec:
      containers:
        - name: app
          image: user-api # using latest tag is not recommended. always use a specific tag
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Pod 
metadata:
  name: setup-pod
spec:
  initContainers:
    - name: setup
      image: busybox
      command: ['sh', '-c', 'echo initialized > /data/setup.txt']
  containers:
    - name: app
      image: nginx
      volumeMounts:
        - name: app-data
          mountPath: /app/data
  volumes:
    - name: app-data
      emptyDir: {} # This emptyDir volume is used to provide temporary storage for the app's data during the pod's lifecycle.

---
apiVersion: v1
kind: Pod
metadata:
  name: multi-container
spec:
  containers:
    - name: service-a
      image: nginx
      ports:
        - containerPort: 80
    - name: service-b
      image: nginx
      ports:
        - containerPort: 80 # not sure what to fix here
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: data-cleanup
spec:
  schedule: "* * * * *"  # Every minute
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: cleaner
              image: busybox
              command: ["echo", "Cleaning"]
          restartPolicy: OnFailure
---
apiVersion: v1
kind: Pod
metadata:
  name: compute-api
spec:
  containers:
    - name: api
      image: python:3.9
      command: ["python", "-c", "a = 'x' * 1024 * 1024 * 100"]
      resources:
        limits:
          memory: "64Mi"
          cpu: "250m"
        requests:
          memory: "32Mi"
          cpu: "100m"
---
apiVersion: v1
kind: Pod
metadata:
  name: analytics-service
spec:
  securityContext:
    runAsUser: 1000
  containers:
    - name: service
      image: nginx
      volumeMounts:
        - name: shared-data
          mountPath: /data
  volumes:
    - name: shared-data
      hostPath:
        path: /etc
        type: Directory
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-deploy
  labels:
    app: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
         - name: app
           image: nginx:latest 
           ports:
             - containerPort: 80 
---
apiVersion: v1
kind: Service
metadata:
  name: app-service
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80 # targetPort and containerPort should always be the same